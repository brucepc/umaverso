/**
 * Medusa Storefront API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { StoreOrderFulfillment } from './store-order-fulfillment';
import { StorePaymentCollection } from './store-payment-collection';
import { StoreOrderAddress } from './store-order-address';
import { StoreOrderLineItem } from './store-order-line-item';
import { BaseOrderSummary } from './base-order-summary';
import { BaseOrderTransaction } from './base-order-transaction';
import { StoreCustomer } from './store-customer';
import { StoreOrderShippingMethod } from './store-order-shipping-method';


/**
 * The order\'s details.
 */
export interface StoreOrder { 
    /**
     * The order\'s ID.
     */
    id: string;
    /**
     * The ID of the associated region.
     */
    region_id: string;
    /**
     * The ID of the customer that placed the order.
     */
    customer_id: string;
    /**
     * The ID of the sales channel the order was placed in.
     */
    sales_channel_id: string;
    /**
     * The email of the customer that placed the order.
     */
    email: string;
    /**
     * The order\'s currency code.
     */
    currency_code: string;
    /**
     * The order\'s display ID.
     */
    display_id?: number;
    shipping_address?: StoreOrderAddress;
    billing_address?: StoreOrderAddress;
    /**
     * The order\'s items.
     */
    items: Array<StoreOrderLineItem>;
    /**
     * The order\'s shipping methods.
     */
    shipping_methods: Array<StoreOrderShippingMethod>;
    /**
     * The order\'s payment collections.
     */
    payment_collections?: Array<StorePaymentCollection>;
    /**
     * The order\'s payment status.
     */
    payment_status: StoreOrder.PaymentStatusEnum;
    /**
     * The order\'s fulfillments.
     */
    fulfillments?: Array<StoreOrderFulfillment>;
    /**
     * The order\'s fulfillment status.
     */
    fulfillment_status: StoreOrder.FulfillmentStatusEnum;
    summary: BaseOrderSummary;
    /**
     * The order\'s metadata, can hold custom key-value pairs.
     */
    metadata?: object;
    /**
     * The date the order was created.
     */
    created_at: string;
    /**
     * The date the order was updated.
     */
    updated_at: string;
    /**
     * The order items\' total including taxes, excluding promotions.
     */
    original_item_total: number;
    /**
     * The order items\' total excluding taxes, including promotions.
     */
    original_item_subtotal: number;
    /**
     * The total taxes applied on the order items, excluding promotions.
     */
    original_item_tax_total: number;
    /**
     * The order items\' total including taxes and promotions.
     */
    item_total: number;
    /**
     * The order items\' total excluding taxes, including promotions.
     */
    item_subtotal: number;
    /**
     * The total taxes applied on the order\'s items, including promotions.
     */
    item_tax_total: number;
    /**
     * The order\'s total including taxes, excluding promotions.
     */
    original_total: number;
    /**
     * The order\'s total excluding taxes, including promotions.
     */
    original_subtotal: number;
    /**
     * The total taxes of the order excluding promotions.
     */
    original_tax_total: number;
    /**
     * The order\'s total including taxes and promotions.
     */
    total: number;
    /**
     * The order\'s total excluding taxes, including promotions.
     */
    subtotal: number;
    /**
     * The tax totals of the order including promotions.
     */
    tax_total: number;
    /**
     * The order\'s discount total.
     */
    discount_total: number;
    /**
     * The total taxes applied on the discounted amount.
     */
    discount_tax_total: number;
    /**
     * The order\'s gift card total.
     */
    gift_card_total: number;
    /**
     * The total taxes applied on the gift card\'s amount.
     */
    gift_card_tax_total: number;
    /**
     * The order\'s shipping total including taxes and promotions.
     */
    shipping_total: number;
    /**
     * The order\'s shipping total excluding taxes, including promotions.
     */
    shipping_subtotal: number;
    /**
     * The total taxes of the order\'s shipping including promotions.
     */
    shipping_tax_total: number;
    /**
     * The order\'s shipping total including taxes, excluding promotions.
     */
    original_shipping_total: number;
    /**
     * The order\'s shipping total excluding taxes, including promotions.
     */
    original_shipping_subtotal: number;
    /**
     * The total taxes of the order\'s shipping excluding promotions.
     */
    original_shipping_tax_total: number;
    customer?: StoreCustomer;
    /**
     * The order\'s transactions.
     */
    transactions?: Array<BaseOrderTransaction>;
    /**
     * The order\'s status.
     */
    status: string;
}
export namespace StoreOrder {
    export type PaymentStatusEnum = 'canceled' | 'not_paid' | 'awaiting' | 'authorized' | 'partially_authorized' | 'captured' | 'partially_captured' | 'partially_refunded' | 'refunded' | 'requires_action';
    export const PaymentStatusEnum = {
        Canceled: 'canceled' as PaymentStatusEnum,
        NotPaid: 'not_paid' as PaymentStatusEnum,
        Awaiting: 'awaiting' as PaymentStatusEnum,
        Authorized: 'authorized' as PaymentStatusEnum,
        PartiallyAuthorized: 'partially_authorized' as PaymentStatusEnum,
        Captured: 'captured' as PaymentStatusEnum,
        PartiallyCaptured: 'partially_captured' as PaymentStatusEnum,
        PartiallyRefunded: 'partially_refunded' as PaymentStatusEnum,
        Refunded: 'refunded' as PaymentStatusEnum,
        RequiresAction: 'requires_action' as PaymentStatusEnum
    };
    export type FulfillmentStatusEnum = 'canceled' | 'not_fulfilled' | 'partially_fulfilled' | 'fulfilled' | 'partially_shipped' | 'shipped' | 'partially_delivered' | 'delivered';
    export const FulfillmentStatusEnum = {
        Canceled: 'canceled' as FulfillmentStatusEnum,
        NotFulfilled: 'not_fulfilled' as FulfillmentStatusEnum,
        PartiallyFulfilled: 'partially_fulfilled' as FulfillmentStatusEnum,
        Fulfilled: 'fulfilled' as FulfillmentStatusEnum,
        PartiallyShipped: 'partially_shipped' as FulfillmentStatusEnum,
        Shipped: 'shipped' as FulfillmentStatusEnum,
        PartiallyDelivered: 'partially_delivered' as FulfillmentStatusEnum,
        Delivered: 'delivered' as FulfillmentStatusEnum
    };
}


