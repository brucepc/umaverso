/**
 * Medusa Storefront API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { PostShippingOptionsIdCalculateRequest } from '../model/models';
import { StoreShippingOptionListResponse } from '../model/models';
import { StoreShippingOptionResponse } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface ShippingOptionsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * List Shipping Options for Cart
     * Retrieve a list of shipping options for a cart. The cart\&#39;s ID is set in the required &#x60;cart_id&#x60; query parameter.  The shipping options also be sorted or paginated. 
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param cartId The ID of the cart to retrieve its shipping options.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param offset The number of items to skip when retrieving a list.
     * @param limit Limit the number of items returned in the list.
     * @param order The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with &#x60;-&#x60;.
     * @param $and Join query parameters with an AND condition. Each object\&#39;s content is the same type as the expected query parameters.
     * @param $or Join query parameters with an OR condition. Each object\&#39;s content is the same type as the expected query parameters.
     * @param isReturn Whether the shipping option can be used for returns.
     */
    getShippingOptions(xPublishableApiKey: string, cartId: string, fields?: string, offset?: number, limit?: number, order?: string, $and?: Array<object>, $or?: Array<object>, isReturn?: boolean, extraHttpRequestParams?: any): Observable<StoreShippingOptionListResponse>;

    /**
     * Calculate Shipping Option Price
     * Calculate the price of a shipping option in a cart.
     * @param id The shipping option\&#39;s ID.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param postShippingOptionsIdCalculateRequest 
     */
    postShippingOptionsIdCalculate(id: string, xPublishableApiKey: string, fields?: string, postShippingOptionsIdCalculateRequest?: PostShippingOptionsIdCalculateRequest, extraHttpRequestParams?: any): Observable<StoreShippingOptionResponse>;

}
