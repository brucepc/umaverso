/**
 * Medusa Storefront API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { DeleteCartsIdLineItemsLineId200Response } from '../model/models';
import { DeleteCartsIdPromotions200Response } from '../model/models';
import { PostCartsId200Response } from '../model/models';
import { PostCartsIdComplete200Response } from '../model/models';
import { PostCartsIdRequest } from '../model/models';
import { PostCartsIdShippingMethodsRequest } from '../model/models';
import { PostCartsRequest } from '../model/models';
import { StoreAddCartLineItem } from '../model/models';
import { StoreCartAddPromotion } from '../model/models';
import { StoreCartResponse } from '../model/models';
import { StoreUpdateCartLineItem } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface CartsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Remove Line Item from Cart
     * Remove a line item from a cart.
     * @param id The cart\&#39;s ID.
     * @param lineId The line item\&#39;s ID.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    deleteCartsIdLineItemsLineId(id: string, lineId: string, xPublishableApiKey: string, fields?: string, extraHttpRequestParams?: any): Observable<DeleteCartsIdLineItemsLineId200Response>;

    /**
     * Remove Promotions from Cart
     * Remove a list of promotions from a cart.
     * @param id The cart\&#39;s ID.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    deleteCartsIdPromotions(id: string, xPublishableApiKey: string, fields?: string, extraHttpRequestParams?: any): Observable<DeleteCartsIdPromotions200Response>;

    /**
     * Get a Cart
     * Retrieve a cart by its ID. You can expand the cart\&#39;s relations or select the fields that should be returned.
     * @param id The cart\&#39;s ID.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    getCartsId(id: string, xPublishableApiKey: string, fields?: string, extraHttpRequestParams?: any): Observable<StoreCartResponse>;

    /**
     * Create Cart
     * Create a cart.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param postCartsRequest 
     */
    postCarts(xPublishableApiKey: string, fields?: string, postCartsRequest?: PostCartsRequest, extraHttpRequestParams?: any): Observable<StoreCartResponse>;

    /**
     * Update a Cart
     * Update a cart\&#39;s details. This unsets the payment methods chosen before, and the customer would have to choose them again. Also, if the customer has chosen a shipping method whose option isn\&#39;t valid for the cart\&#39;s shipping address anymore, the shipping method will be unset. For example, if the shipping option is valid only in the US geo zone, and the shipping address\&#39;s country code is &#x60;DE&#x60;, the shipping method will be unset.
     * @param id The cart\&#39;s ID.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param postCartsIdRequest 
     */
    postCartsId(id: string, xPublishableApiKey: string, fields?: string, postCartsIdRequest?: PostCartsIdRequest, extraHttpRequestParams?: any): Observable<PostCartsId200Response>;

    /**
     * Complete Cart
     * Complete a cart and place an order.
     * @param id The cart\&#39;s ID.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    postCartsIdComplete(id: string, xPublishableApiKey: string, fields?: string, extraHttpRequestParams?: any): Observable<PostCartsIdComplete200Response>;

    /**
     * Set Cart\&#39;s Customer
     * Set the customer of the cart. This is useful when you create the cart for a guest customer, then they log in with their account.
     * @param id The cart\&#39;s ID.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    postCartsIdCustomer(id: string, xPublishableApiKey: string, fields?: string, extraHttpRequestParams?: any): Observable<StoreCartResponse>;

    /**
     * Add Line Item to Cart
     * Add a product variant as a line item in the cart.
     * @param id The cart\&#39;s ID.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param storeAddCartLineItem 
     */
    postCartsIdLineItems(id: string, xPublishableApiKey: string, fields?: string, storeAddCartLineItem?: StoreAddCartLineItem, extraHttpRequestParams?: any): Observable<StoreCartResponse>;

    /**
     * Update a Line Item in a Cart
     * Update a line item\&#39;s details in the cart.
     * @param id The cart\&#39;s ID.
     * @param lineId The line item\&#39;s ID.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param storeUpdateCartLineItem 
     */
    postCartsIdLineItemsLineId(id: string, lineId: string, xPublishableApiKey: string, fields?: string, storeUpdateCartLineItem?: StoreUpdateCartLineItem, extraHttpRequestParams?: any): Observable<StoreCartResponse>;

    /**
     * Add Promotions to Cart
     * Add a list of promotions to a cart.
     * @param id The cart\&#39;s ID.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param storeCartAddPromotion 
     */
    postCartsIdPromotions(id: string, xPublishableApiKey: string, fields?: string, storeCartAddPromotion?: StoreCartAddPromotion, extraHttpRequestParams?: any): Observable<StoreCartResponse>;

    /**
     * Add Shipping Method to Cart
     * Add a shipping method to a cart. Use this API route when the customer chooses their preferred shipping option.
     * @param id The cart\&#39;s ID.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param postCartsIdShippingMethodsRequest 
     */
    postCartsIdShippingMethods(id: string, xPublishableApiKey: string, fields?: string, postCartsIdShippingMethodsRequest?: PostCartsIdShippingMethodsRequest, extraHttpRequestParams?: any): Observable<StoreCartResponse>;

    /**
     * Calculate Cart Taxes
     * Calculate the cart\&#39;s tax lines and amounts.
     * @param id The cart\&#39;s ID.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    postCartsIdTaxes(id: string, xPublishableApiKey: string, fields?: string, extraHttpRequestParams?: any): Observable<StoreCartResponse>;

}
