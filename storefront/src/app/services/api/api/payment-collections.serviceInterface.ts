/**
 * Medusa Storefront API
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { StoreCreatePaymentCollection } from '../model/models';
import { StoreInitializePaymentSession } from '../model/models';
import { StorePaymentCollectionResponse } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface PaymentCollectionsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create Payment Collection
     * Create a payment collection for a cart. This is used during checkout-page, where the payment collection holds the cart\&#39;s payment sessions.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param storeCreatePaymentCollection
     */
    postPaymentCollections(xPublishableApiKey: string, fields?: string, storeCreatePaymentCollection?: StoreCreatePaymentCollection, extraHttpRequestParams?: any): Observable<StorePaymentCollectionResponse>;

    /**
     * Initialize Payment Session of a Payment Collection
     * Initialize and add a payment session to a payment collection. This is used during checkout-page, where you create a payment collection for the cart, then initialize a payment session for the payment provider that the customer chooses.
     * @param id The payment collection\&#39;s ID.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param storeInitializePaymentSession
     */
    postPaymentCollectionsIdPaymentSessions(id: string, xPublishableApiKey: string, fields?: string, storeInitializePaymentSession?: StoreInitializePaymentSession, extraHttpRequestParams?: any): Observable<StorePaymentCollectionResponse>;

}
