/**
 * Medusa Storefront API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { GetProductCategoriesCreatedAtParameter } from '../model/get-product-categories-created-at-parameter';
// @ts-ignore
import { GetProductCategoriesDescriptionParameter } from '../model/get-product-categories-description-parameter';
// @ts-ignore
import { GetProductCategoriesHandleParameter } from '../model/get-product-categories-handle-parameter';
// @ts-ignore
import { GetProductCategoriesIdParameter } from '../model/get-product-categories-id-parameter';
// @ts-ignore
import { GetProductCategoriesNameParameter } from '../model/get-product-categories-name-parameter';
// @ts-ignore
import { GetProductCategoriesParentCategoryIdParameter } from '../model/get-product-categories-parent-category-id-parameter';
// @ts-ignore
import { GetProductCategoriesUpdatedAtParameter } from '../model/get-product-categories-updated-at-parameter';
// @ts-ignore
import { StoreProductCategoryListResponse } from '../model/store-product-category-list-response';
// @ts-ignore
import { StoreProductCategoryResponse } from '../model/store-product-category-response';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import {
    ProductCategoriesServiceInterface
} from './product-categories.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class ProductCategoriesService implements ProductCategoriesServiceInterface {

    protected basePath = 'http://localhost:9000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * List Product Categories
     * Retrieve a list of product categories. The product categories can be filtered by fields such as &#x60;id&#x60;. The product categories can also be sorted or paginated.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param offset The number of items to skip when retrieving a list.
     * @param limit Limit the number of items returned in the list.
     * @param order The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with &#x60;-&#x60;.
     * @param q Search term to filter the product category\&#39;s properties.
     * @param id 
     * @param description 
     * @param handle 
     * @param parentCategoryId 
     * @param includeAncestorsTree Whether to retrieve the category\&#39;s parent. If you enable this, add to the &#x60;fields&#x60; query parameter &#x60;parent_category&#x60; to set the parent of a category in this field. You can either pass &#x60;*parent_category&#x60; to retreieve the fields of all parent categories, or select specific fields to make the response size smaller. For example, &#x60;fields&#x3D;parent_category.id,parent_category.name&#x60;.
     * @param includeDescendantsTree Whether to retrieve a list of child categories. If you enable this, add to the &#x60;fields&#x60; query parameter &#x60;category_children&#x60; to set the child of a category in this field. You can either pass &#x60;*category_children&#x60; to retreieve the fields of all child categories, or select specific fields to make the response size smaller. For example, &#x60;fields&#x3D;category_children.id,category_children.name&#x60;.
     * @param createdAt Filter by the category\&#39;s creation date.
     * @param updatedAt Filter by the category\&#39;s update date.
     * @param $and 
     * @param $or 
     * @param name 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProductCategories(xPublishableApiKey: string, fields?: string, offset?: number, limit?: number, order?: string, q?: string, id?: GetProductCategoriesIdParameter, description?: GetProductCategoriesDescriptionParameter, handle?: GetProductCategoriesHandleParameter, parentCategoryId?: GetProductCategoriesParentCategoryIdParameter, includeAncestorsTree?: boolean, includeDescendantsTree?: boolean, createdAt?: GetProductCategoriesCreatedAtParameter, updatedAt?: GetProductCategoriesUpdatedAtParameter, $and?: Array<object>, $or?: Array<object>, name?: GetProductCategoriesNameParameter, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext, transferCache?: boolean}): Observable<StoreProductCategoryListResponse>;
    public getProductCategories(xPublishableApiKey: string, fields?: string, offset?: number, limit?: number, order?: string, q?: string, id?: GetProductCategoriesIdParameter, description?: GetProductCategoriesDescriptionParameter, handle?: GetProductCategoriesHandleParameter, parentCategoryId?: GetProductCategoriesParentCategoryIdParameter, includeAncestorsTree?: boolean, includeDescendantsTree?: boolean, createdAt?: GetProductCategoriesCreatedAtParameter, updatedAt?: GetProductCategoriesUpdatedAtParameter, $and?: Array<object>, $or?: Array<object>, name?: GetProductCategoriesNameParameter, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<StoreProductCategoryListResponse>>;
    public getProductCategories(xPublishableApiKey: string, fields?: string, offset?: number, limit?: number, order?: string, q?: string, id?: GetProductCategoriesIdParameter, description?: GetProductCategoriesDescriptionParameter, handle?: GetProductCategoriesHandleParameter, parentCategoryId?: GetProductCategoriesParentCategoryIdParameter, includeAncestorsTree?: boolean, includeDescendantsTree?: boolean, createdAt?: GetProductCategoriesCreatedAtParameter, updatedAt?: GetProductCategoriesUpdatedAtParameter, $and?: Array<object>, $or?: Array<object>, name?: GetProductCategoriesNameParameter, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<StoreProductCategoryListResponse>>;
    public getProductCategories(xPublishableApiKey: string, fields?: string, offset?: number, limit?: number, order?: string, q?: string, id?: GetProductCategoriesIdParameter, description?: GetProductCategoriesDescriptionParameter, handle?: GetProductCategoriesHandleParameter, parentCategoryId?: GetProductCategoriesParentCategoryIdParameter, includeAncestorsTree?: boolean, includeDescendantsTree?: boolean, createdAt?: GetProductCategoriesCreatedAtParameter, updatedAt?: GetProductCategoriesUpdatedAtParameter, $and?: Array<object>, $or?: Array<object>, name?: GetProductCategoriesNameParameter, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (xPublishableApiKey === null || xPublishableApiKey === undefined) {
            throw new Error('Required parameter xPublishableApiKey was null or undefined when calling getProductCategories.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (fields !== undefined && fields !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fields, 'fields');
        }
        if (offset !== undefined && offset !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>offset, 'offset');
        }
        if (limit !== undefined && limit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limit, 'limit');
        }
        if (order !== undefined && order !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>order, 'order');
        }
        if (q !== undefined && q !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>q, 'q');
        }
        if (id !== undefined && id !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>id, 'id');
        }
        if (description !== undefined && description !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>description, 'description');
        }
        if (handle !== undefined && handle !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>handle, 'handle');
        }
        if (parentCategoryId !== undefined && parentCategoryId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>parentCategoryId, 'parent_category_id');
        }
        if (includeAncestorsTree !== undefined && includeAncestorsTree !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeAncestorsTree, 'include_ancestors_tree');
        }
        if (includeDescendantsTree !== undefined && includeDescendantsTree !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeDescendantsTree, 'include_descendants_tree');
        }
        if (createdAt !== undefined && createdAt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>createdAt, 'created_at');
        }
        if (updatedAt !== undefined && updatedAt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>updatedAt, 'updated_at');
        }
        if ($and) {
            $and.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, '$and');
            })
        }
        if ($or) {
            $or.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, '$or');
            })
        }
        if (name !== undefined && name !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>name, 'name');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xPublishableApiKey !== undefined && xPublishableApiKey !== null) {
            localVarHeaders = localVarHeaders.set('x-publishable-api-key', String(xPublishableApiKey));
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/plain'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/store/product-categories`;
        return this.httpClient.request<StoreProductCategoryListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a Product Category
     * Retrieve a product category by its ID. You can expand the product category\&#39;s relations or select the fields that should be returned.
     * @param id The product category\&#39;s ID.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param includeAncestorsTree Whether to retrieve the category\&#39;s parent. If you enable this, add to the &#x60;fields&#x60; query parameter &#x60;parent_category&#x60; to set the parent of a category in this field. You can either pass &#x60;*parent_category&#x60; to retreieve the fields of all parent categories, or select specific fields to make the response size smaller. For example, &#x60;fields&#x3D;parent_category.id,parent_category.name&#x60;.
     * @param includeDescendantsTree Whether to retrieve a list of child categories. If you enable this, add to the &#x60;fields&#x60; query parameter &#x60;category_children&#x60; to set the children of a category in this field. You can either pass &#x60;*category_children&#x60; to retreieve the fields of all child categories, or select specific fields to make the response size smaller. For example, &#x60;fields&#x3D;category_children.id,category_children.name&#x60;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProductCategoriesId(id: string, xPublishableApiKey: string, fields?: string, includeAncestorsTree?: boolean, includeDescendantsTree?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext, transferCache?: boolean}): Observable<StoreProductCategoryResponse>;
    public getProductCategoriesId(id: string, xPublishableApiKey: string, fields?: string, includeAncestorsTree?: boolean, includeDescendantsTree?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<StoreProductCategoryResponse>>;
    public getProductCategoriesId(id: string, xPublishableApiKey: string, fields?: string, includeAncestorsTree?: boolean, includeDescendantsTree?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<StoreProductCategoryResponse>>;
    public getProductCategoriesId(id: string, xPublishableApiKey: string, fields?: string, includeAncestorsTree?: boolean, includeDescendantsTree?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getProductCategoriesId.');
        }
        if (xPublishableApiKey === null || xPublishableApiKey === undefined) {
            throw new Error('Required parameter xPublishableApiKey was null or undefined when calling getProductCategoriesId.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (fields !== undefined && fields !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fields, 'fields');
        }
        if (includeAncestorsTree !== undefined && includeAncestorsTree !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeAncestorsTree, 'include_ancestors_tree');
        }
        if (includeDescendantsTree !== undefined && includeDescendantsTree !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeDescendantsTree, 'include_descendants_tree');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xPublishableApiKey !== undefined && xPublishableApiKey !== null) {
            localVarHeaders = localVarHeaders.set('x-publishable-api-key', String(xPublishableApiKey));
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/plain'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/store/product-categories/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<StoreProductCategoryResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
