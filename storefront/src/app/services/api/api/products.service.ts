/**
 * Medusa Storefront API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { GetProducts200Response } from '../model/get-products200-response';
// @ts-ignore
import { GetProductsCategoryIdParameter } from '../model/get-products-category-id-parameter';
// @ts-ignore
import { GetProductsCreatedAtParameter } from '../model/get-products-created-at-parameter';
// @ts-ignore
import { GetProductsHandleParameter } from '../model/get-products-handle-parameter';
// @ts-ignore
import { GetProductsIdParameter } from '../model/get-products-id-parameter';
// @ts-ignore
import { GetProductsSalesChannelIdParameter } from '../model/get-products-sales-channel-id-parameter';
// @ts-ignore
import { GetProductsTagIdParameter } from '../model/get-products-tag-id-parameter';
// @ts-ignore
import { GetProductsTitleParameter } from '../model/get-products-title-parameter';
// @ts-ignore
import { GetProductsTypeIdParameter } from '../model/get-products-type-id-parameter';
// @ts-ignore
import { GetProductsUpdatedAtParameter } from '../model/get-products-updated-at-parameter';
// @ts-ignore
import { GetProductsVariantsParameter } from '../model/get-products-variants-parameter';
// @ts-ignore
import { StoreProductResponse } from '../model/store-product-response';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import {
    ProductsServiceInterface
} from './products.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class ProductsService implements ProductsServiceInterface {

    protected basePath = 'http://localhost:9000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * List Products
     * Retrieve a list of products. The products can be filtered by fields such as &#x60;id&#x60;. The products can also be sorted or paginated.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param offset The number of items to skip when retrieving a list.
     * @param limit Limit the number of items returned in the list.
     * @param order The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with &#x60;-&#x60;.
     * @param $and Join query parameters with an AND condition. Each object\&#39;s content is the same type as the expected query parameters.
     * @param $or Join query parameters with an OR condition. Each object\&#39;s content is the same type as the expected query parameters.
     * @param q Search term to filter the product\&#39;s searchable properties.
     * @param id 
     * @param title Filter by product titles.
     * @param handle Filter by product handles.
     * @param isGiftcard Whether the product is a gift card.
     * @param collectionId Filter by a collection\&#39;s ID to retrieve the products in it.
     * @param tagId Filter by a tag\&#39;s ID to retrieve the products in it.
     * @param typeId Filter by a type\&#39;s ID to retrieve the products in it.
     * @param createdAt Filter by the product\&#39;s creation date.
     * @param updatedAt Filter by the product\&#39;s update date.
     * @param regionId The ID of the region the products are being viewed from. This is required if you\&#39;re retrieving product variant prices with taxes.
     * @param province The province the products are being viewed from. This is useful to narrow down the tax context when calculating product variant prices with taxes.
     * @param salesChannelId 
     * @param categoryId 
     * @param variants Filter the products\&#39; variants.
     * @param countryCode The product\&#39;s country code.
     * @param cartId The product\&#39;s cart id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProducts(xPublishableApiKey: string, fields?: string, offset?: number, limit?: number, order?: string, $and?: Array<object>, $or?: Array<object>, q?: string, id?: GetProductsIdParameter, title?: GetProductsTitleParameter, handle?: GetProductsHandleParameter, isGiftcard?: boolean, collectionId?: Array<string>, tagId?: GetProductsTagIdParameter, typeId?: GetProductsTypeIdParameter, createdAt?: GetProductsCreatedAtParameter, updatedAt?: GetProductsUpdatedAtParameter, regionId?: string, province?: string, salesChannelId?: GetProductsSalesChannelIdParameter, categoryId?: GetProductsCategoryIdParameter, variants?: GetProductsVariantsParameter, countryCode?: string, cartId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext, transferCache?: boolean}): Observable<GetProducts200Response>;
    public getProducts(xPublishableApiKey: string, fields?: string, offset?: number, limit?: number, order?: string, $and?: Array<object>, $or?: Array<object>, q?: string, id?: GetProductsIdParameter, title?: GetProductsTitleParameter, handle?: GetProductsHandleParameter, isGiftcard?: boolean, collectionId?: Array<string>, tagId?: GetProductsTagIdParameter, typeId?: GetProductsTypeIdParameter, createdAt?: GetProductsCreatedAtParameter, updatedAt?: GetProductsUpdatedAtParameter, regionId?: string, province?: string, salesChannelId?: GetProductsSalesChannelIdParameter, categoryId?: GetProductsCategoryIdParameter, variants?: GetProductsVariantsParameter, countryCode?: string, cartId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetProducts200Response>>;
    public getProducts(xPublishableApiKey: string, fields?: string, offset?: number, limit?: number, order?: string, $and?: Array<object>, $or?: Array<object>, q?: string, id?: GetProductsIdParameter, title?: GetProductsTitleParameter, handle?: GetProductsHandleParameter, isGiftcard?: boolean, collectionId?: Array<string>, tagId?: GetProductsTagIdParameter, typeId?: GetProductsTypeIdParameter, createdAt?: GetProductsCreatedAtParameter, updatedAt?: GetProductsUpdatedAtParameter, regionId?: string, province?: string, salesChannelId?: GetProductsSalesChannelIdParameter, categoryId?: GetProductsCategoryIdParameter, variants?: GetProductsVariantsParameter, countryCode?: string, cartId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetProducts200Response>>;
    public getProducts(xPublishableApiKey: string, fields?: string, offset?: number, limit?: number, order?: string, $and?: Array<object>, $or?: Array<object>, q?: string, id?: GetProductsIdParameter, title?: GetProductsTitleParameter, handle?: GetProductsHandleParameter, isGiftcard?: boolean, collectionId?: Array<string>, tagId?: GetProductsTagIdParameter, typeId?: GetProductsTypeIdParameter, createdAt?: GetProductsCreatedAtParameter, updatedAt?: GetProductsUpdatedAtParameter, regionId?: string, province?: string, salesChannelId?: GetProductsSalesChannelIdParameter, categoryId?: GetProductsCategoryIdParameter, variants?: GetProductsVariantsParameter, countryCode?: string, cartId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (xPublishableApiKey === null || xPublishableApiKey === undefined) {
            throw new Error('Required parameter xPublishableApiKey was null or undefined when calling getProducts.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (fields !== undefined && fields !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fields, 'fields');
        }
        if (offset !== undefined && offset !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>offset, 'offset');
        }
        if (limit !== undefined && limit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limit, 'limit');
        }
        if (order !== undefined && order !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>order, 'order');
        }
        if ($and) {
            $and.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, '$and');
            })
        }
        if ($or) {
            $or.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, '$or');
            })
        }
        if (q !== undefined && q !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>q, 'q');
        }
        if (id !== undefined && id !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>id, 'id');
        }
        if (title !== undefined && title !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>title, 'title');
        }
        if (handle !== undefined && handle !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>handle, 'handle');
        }
        if (isGiftcard !== undefined && isGiftcard !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isGiftcard, 'is_giftcard');
        }
        if (collectionId) {
            collectionId.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'collection_id');
            })
        }
        if (tagId !== undefined && tagId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tagId, 'tag_id');
        }
        if (typeId !== undefined && typeId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>typeId, 'type_id');
        }
        if (createdAt !== undefined && createdAt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>createdAt, 'created_at');
        }
        if (updatedAt !== undefined && updatedAt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>updatedAt, 'updated_at');
        }
        if (regionId !== undefined && regionId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>regionId, 'region_id');
        }
        if (province !== undefined && province !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>province, 'province');
        }
        if (salesChannelId !== undefined && salesChannelId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>salesChannelId, 'sales_channel_id');
        }
        if (categoryId !== undefined && categoryId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>categoryId, 'category_id');
        }
        if (variants !== undefined && variants !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>variants, 'variants');
        }
        if (countryCode !== undefined && countryCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>countryCode, 'country_code');
        }
        if (cartId !== undefined && cartId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cartId, 'cart_id');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xPublishableApiKey !== undefined && xPublishableApiKey !== null) {
            localVarHeaders = localVarHeaders.set('x-publishable-api-key', String(xPublishableApiKey));
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/plain'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/store/products`;
        return this.httpClient.request<GetProducts200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a Product
     * Retrieve a product by its ID. You can expand the product\&#39;s relations or select the fields that should be returned.
     * @param id The product\&#39;s ID.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param regionId The ID of the region the product is being viewed from. This is required if you\&#39;re retrieving product variant prices with taxes.
     * @param countryCode The country code the product is being viewed from. This is required if you\&#39;re retrieving product variant prices with taxes.
     * @param province The province the product is being viewed from. This is useful to narrow down the tax context when calculating product variant prices with taxes.
     * @param cartId The ID of the customer\&#39;s cart. If set, the cart\&#39;s region and shipping address\&#39;s country code and province are used instead of the &#x60;region_id&#x60;, &#x60;country_code&#x60;, and &#x60;province&#x60; properties.
     * @param limit Limit the number of items returned in the list.
     * @param offset The number of items to skip when retrieving a list.
     * @param order The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with &#x60;-&#x60;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProductsId(id: string, xPublishableApiKey: string, fields?: string, regionId?: string, countryCode?: string, province?: string, cartId?: string, limit?: number, offset?: number, order?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext, transferCache?: boolean}): Observable<StoreProductResponse>;
    public getProductsId(id: string, xPublishableApiKey: string, fields?: string, regionId?: string, countryCode?: string, province?: string, cartId?: string, limit?: number, offset?: number, order?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<StoreProductResponse>>;
    public getProductsId(id: string, xPublishableApiKey: string, fields?: string, regionId?: string, countryCode?: string, province?: string, cartId?: string, limit?: number, offset?: number, order?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<StoreProductResponse>>;
    public getProductsId(id: string, xPublishableApiKey: string, fields?: string, regionId?: string, countryCode?: string, province?: string, cartId?: string, limit?: number, offset?: number, order?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/plain', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getProductsId.');
        }
        if (xPublishableApiKey === null || xPublishableApiKey === undefined) {
            throw new Error('Required parameter xPublishableApiKey was null or undefined when calling getProductsId.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (fields !== undefined && fields !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fields, 'fields');
        }
        if (regionId !== undefined && regionId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>regionId, 'region_id');
        }
        if (countryCode !== undefined && countryCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>countryCode, 'country_code');
        }
        if (province !== undefined && province !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>province, 'province');
        }
        if (cartId !== undefined && cartId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cartId, 'cart_id');
        }
        if (limit !== undefined && limit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limit, 'limit');
        }
        if (offset !== undefined && offset !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>offset, 'offset');
        }
        if (order !== undefined && order !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>order, 'order');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xPublishableApiKey !== undefined && xPublishableApiKey !== null) {
            localVarHeaders = localVarHeaders.set('x-publishable-api-key', String(xPublishableApiKey));
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/plain'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/store/products/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<StoreProductResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
