/**
 * Medusa Storefront API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { AuthResponse } from '../model/models';
import { AuthStoreSessionResponse } from '../model/models';
import { DeleteSession200Response } from '../model/models';
import { PostActorTypeAuthProvider200Response } from '../model/models';
import { PostActorTypeAuthProviderUpdate200Response } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface AuthServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Delete Authentication Session
     * Deletes the cookie session ID previously set for authentication.
     */
    deleteSession(extraHttpRequestParams?: any): Observable<DeleteSession200Response>;

    /**
     * Authenticate Customer
     * Authenticate a customer and receive the JWT token to be used in the header of subsequent requests.  When used with a third-party provider, such as Google, the request returns a &#x60;location&#x60; property. You redirect to the specified URL in your storefront to continue authentication with the third-party service. 
     * @param authProvider The provider used for authentication.
     * @param body 
     */
    postActorTypeAuthProvider(authProvider: string, body?: object, extraHttpRequestParams?: any): Observable<PostActorTypeAuthProvider200Response>;

    /**
     * Validate Authentication Callback
     * This API route is used by your storefront or frontend application when a third-party provider redirects to it after authentication. It validates the authentication with the third-party provider and, if successful, returns an authentication token. All query parameters received from the third-party provider, such as &#x60;code&#x60;, &#x60;state&#x60;, and &#x60;error&#x60;, must be passed as query parameters to this route. You can decode the JWT token using libraries like [react-jwt](https://www.npmjs.com/package/react-jwt) in the storefront. If the decoded data doesn\&#39;t  have an &#x60;actor_id&#x60; property, then you must register the customer using the Create Customer API route passing the token in the request\&#39;s Authorization header. 
     * @param authProvider The provider used for authentication.
     */
    postActorTypeAuthProviderCallback(authProvider: string, extraHttpRequestParams?: any): Observable<AuthResponse>;

    /**
     * Retrieve Registration JWT Token
     * This API route retrieves a registration JWT token of a customer that hasn\&#39;t been registered yet. The token is used in the header of requests that create a customer.
     * @param authProvider The provider used for authentication.
     * @param body 
     */
    postActorTypeAuthProviderRegister(authProvider: string, body?: object, extraHttpRequestParams?: any): Observable<AuthResponse>;

    /**
     * Generate Reset Password Token for Customer
     * Generate a reset password token for a customer. This API route emits the &#x60;auth.password_reset&#x60; event, passing it the token as a payload. You can listen to that event and send the user a notification. The notification should have a URL that accepts a &#x60;token&#x60; query parameter.    Use the generated token to update the user\&#39;s password using the Reset Password API route. 
     * @param authProvider The provider used for authentication.
     * @param body 
     */
    postActorTypeAuthProviderResetPassword(authProvider: string, body?: object, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Reset a Customer\&#39;s Password
     * Reset a customer\&#39;s password. Generate the reset password token first using the Get Reset Password Token API route.
     * @param authProvider The provider used for authentication.
     * @param token The reset password token received using the Get Reset Password API route.
     * @param body 
     */
    postActorTypeAuthProviderUpdate(authProvider: string, token: string, body?: object, extraHttpRequestParams?: any): Observable<PostActorTypeAuthProviderUpdate200Response>;

    /**
     * Refresh Authentication Token
     * Refresh the authentication token of a customer. This is useful after authenticating a customer with a third-party service to ensure the token holds the new user\&#39;s details, or when you don\&#39;t want customers to re-login every day.
     */
    postAdminAuthTokenRefresh(extraHttpRequestParams?: any): Observable<AuthResponse>;

    /**
     * Set Authentication Session
     * Set the cookie session ID of a customer. The customer must be previously authenticated with the &#x60;/auth/customer/{provider}&#x60; API route first, as the JWT token is required in the header of the request.
     */
    postSession(extraHttpRequestParams?: any): Observable<AuthStoreSessionResponse>;

}
