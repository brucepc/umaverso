/**
 * Medusa Storefront API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { GetProductTypesCreatedAtParameter } from '../model/models';
import { GetProductTypesIdParameter } from '../model/models';
import { GetProductTypesUpdatedAtParameter } from '../model/models';
import { GetProductTypesValueParameter } from '../model/models';
import { StoreProductTypeListResponse } from '../model/models';
import { StoreProductTypeResponse } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface ProductTypesServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * List Product Types
     * Retrieve a list of product types. The product types can be filtered by fields such as &#x60;id&#x60;. The product types can also be sorted or paginated.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data.  if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields.  without prefix it will replace the entire default fields.
     * @param offset The number of items to skip when retrieving a list.
     * @param limit Limit the number of items returned in the list.
     * @param order The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with &#x60;-&#x60;.
     * @param $and Join query parameters with an AND condition. Each object\&#39;s content is the same type as the expected query parameters.
     * @param $or Join query parameters with an OR condition. Each object\&#39;s content is the same type as the expected query parameters.
     * @param q Query to search the product type\&#39;s searchable fields.
     * @param id 
     * @param value 
     * @param createdAt Filter by the type\&#39;s creation date.
     * @param updatedAt Filter by the type\&#39;s update date.
     */
    getProductTypes(xPublishableApiKey: string, fields?: string, offset?: number, limit?: number, order?: string, $and?: Array<object>, $or?: Array<object>, q?: string, id?: GetProductTypesIdParameter, value?: GetProductTypesValueParameter, createdAt?: GetProductTypesCreatedAtParameter, updatedAt?: GetProductTypesUpdatedAtParameter, extraHttpRequestParams?: any): Observable<StoreProductTypeListResponse>;

    /**
     * Get a Product Type
     * Retrieve a product type by its ID. You can expand the product type\&#39;s relations or select the fields that should be returned.
     * @param id The product type\&#39;s ID.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data.  if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields.  without prefix it will replace the entire default fields.
     */
    getProductTypesId(id: string, xPublishableApiKey: string, fields?: string, extraHttpRequestParams?: any): Observable<StoreProductTypeResponse>;

}
