/**
 * Medusa Storefront API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { GetProductCategoriesCreatedAtParameter } from '../model/models';
import { GetProductCategoriesDescriptionParameter } from '../model/models';
import { GetProductCategoriesHandleParameter } from '../model/models';
import { GetProductCategoriesIdParameter } from '../model/models';
import { GetProductCategoriesNameParameter } from '../model/models';
import { GetProductCategoriesParentCategoryIdParameter } from '../model/models';
import { GetProductCategoriesUpdatedAtParameter } from '../model/models';
import { StoreProductCategoryListResponse } from '../model/models';
import { StoreProductCategoryResponse } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface ProductCategoriesServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * List Product Categories
     * Retrieve a list of product categories. The product categories can be filtered by fields such as &#x60;id&#x60;. The product categories can also be sorted or paginated.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param offset The number of items to skip when retrieving a list.
     * @param limit Limit the number of items returned in the list.
     * @param order The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with &#x60;-&#x60;.
     * @param q Search term to filter the product category\&#39;s properties.
     * @param id 
     * @param description 
     * @param handle 
     * @param parentCategoryId 
     * @param includeAncestorsTree Whether to retrieve the category\&#39;s parent. If you enable this, add to the &#x60;fields&#x60; query parameter &#x60;parent_category&#x60; to set the parent of a category in this field. You can either pass &#x60;*parent_category&#x60; to retreieve the fields of all parent categories, or select specific fields to make the response size smaller. For example, &#x60;fields&#x3D;parent_category.id,parent_category.name&#x60;.
     * @param includeDescendantsTree Whether to retrieve a list of child categories. If you enable this, add to the &#x60;fields&#x60; query parameter &#x60;category_children&#x60; to set the child of a category in this field. You can either pass &#x60;*category_children&#x60; to retreieve the fields of all child categories, or select specific fields to make the response size smaller. For example, &#x60;fields&#x3D;category_children.id,category_children.name&#x60;.
     * @param createdAt Filter by the category\&#39;s creation date.
     * @param updatedAt Filter by the category\&#39;s update date.
     * @param $and 
     * @param $or 
     * @param name 
     */
    getProductCategories(xPublishableApiKey: string, fields?: string, offset?: number, limit?: number, order?: string, q?: string, id?: GetProductCategoriesIdParameter, description?: GetProductCategoriesDescriptionParameter, handle?: GetProductCategoriesHandleParameter, parentCategoryId?: GetProductCategoriesParentCategoryIdParameter, includeAncestorsTree?: boolean, includeDescendantsTree?: boolean, createdAt?: GetProductCategoriesCreatedAtParameter, updatedAt?: GetProductCategoriesUpdatedAtParameter, $and?: Array<object>, $or?: Array<object>, name?: GetProductCategoriesNameParameter, extraHttpRequestParams?: any): Observable<StoreProductCategoryListResponse>;

    /**
     * Get a Product Category
     * Retrieve a product category by its ID. You can expand the product category\&#39;s relations or select the fields that should be returned.
     * @param id The product category\&#39;s ID.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param includeAncestorsTree Whether to retrieve the category\&#39;s parent. If you enable this, add to the &#x60;fields&#x60; query parameter &#x60;parent_category&#x60; to set the parent of a category in this field. You can either pass &#x60;*parent_category&#x60; to retreieve the fields of all parent categories, or select specific fields to make the response size smaller. For example, &#x60;fields&#x3D;parent_category.id,parent_category.name&#x60;.
     * @param includeDescendantsTree Whether to retrieve a list of child categories. If you enable this, add to the &#x60;fields&#x60; query parameter &#x60;category_children&#x60; to set the children of a category in this field. You can either pass &#x60;*category_children&#x60; to retreieve the fields of all child categories, or select specific fields to make the response size smaller. For example, &#x60;fields&#x3D;category_children.id,category_children.name&#x60;.
     */
    getProductCategoriesId(id: string, xPublishableApiKey: string, fields?: string, includeAncestorsTree?: boolean, includeDescendantsTree?: boolean, extraHttpRequestParams?: any): Observable<StoreProductCategoryResponse>;

}
