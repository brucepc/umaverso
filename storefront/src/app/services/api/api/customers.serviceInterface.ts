/**
 * Medusa Storefront API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { DeleteCustomersMeAddressesAddressId200Response } from '../model/models';
import { GetCustomersMeAddressesCityParameter } from '../model/models';
import { GetCustomersMeAddressesCountryCodeParameter } from '../model/models';
import { GetCustomersMeAddressesPostalCodeParameter } from '../model/models';
import { PostCustomersMeAddressesAddressIdRequest } from '../model/models';
import { PostCustomersMeAddressesRequest } from '../model/models';
import { StoreCreateCustomer } from '../model/models';
import { StoreCustomerAddressListResponse } from '../model/models';
import { StoreCustomerAddressResponse } from '../model/models';
import { StoreCustomerResponse } from '../model/models';
import { StoreUpdateCustomer } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface CustomersServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Remove Customer\&#39;s Address
     * Remove an address of the logged-in customer.
     * @param addressId The address\&#39;s ID.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    deleteCustomersMeAddressesAddressId(addressId: string, xPublishableApiKey: string, fields?: string, extraHttpRequestParams?: any): Observable<DeleteCustomersMeAddressesAddressId200Response>;

    /**
     * Get Logged-in Customer
     * Retrieve the logged-in customer. You can expand the customer\&#39;s relations or select the fields that should be returned.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    getCustomersMe(xPublishableApiKey: string, fields?: string, extraHttpRequestParams?: any): Observable<StoreCustomerResponse>;

    /**
     * List Customer\&#39;s Addresses
     * Retrieve the addresses of the logged-in customer. The addresses can be filtered by fields such as &#x60;country_code&#x60;. The addresses can also be sorted or paginated.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param offset The number of items to skip when retrieving a list.
     * @param limit Limit the number of items returned in the list.
     * @param order The field to sort the data by. By default, the sort order is ascending. To change the order to descending, prefix the field name with &#x60;-&#x60;.
     * @param city Filter by the address\&#39;s city.
     * @param postalCode Filter by the address\&#39;s postal code.
     * @param countryCode Filter by the address\&#39;s country code.
     * @param q Search term to filter the address\&#39;s searchable properties.
     */
    getCustomersMeAddresses(xPublishableApiKey: string, fields?: string, offset?: number, limit?: number, order?: string, city?: GetCustomersMeAddressesCityParameter, postalCode?: GetCustomersMeAddressesPostalCodeParameter, countryCode?: GetCustomersMeAddressesCountryCodeParameter, q?: string, extraHttpRequestParams?: any): Observable<StoreCustomerAddressListResponse>;

    /**
     * Get Customer\&#39;s Address
     * Retrieve an address of the logged-in customer. You can expand the address\&#39;s relations or select the fields that should be returned.
     * @param addressId The address\&#39;s ID.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     */
    getCustomersMeAddressesAddressId(addressId: string, xPublishableApiKey: string, fields?: string, extraHttpRequestParams?: any): Observable<StoreCustomerAddressResponse>;

    /**
     * Register Customer
     * Register a customer. Use the &#x60;/auth/customer/emailpass/register&#x60; API route first to retrieve the registration token and pass it in the header of the request.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param storeCreateCustomer 
     */
    postCustomers(xPublishableApiKey: string, fields?: string, storeCreateCustomer?: StoreCreateCustomer, extraHttpRequestParams?: any): Observable<StoreCustomerResponse>;

    /**
     * Update Customer
     * Update the logged-in customer\&#39;s details.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param storeUpdateCustomer 
     */
    postCustomersMe(xPublishableApiKey: string, fields?: string, storeUpdateCustomer?: StoreUpdateCustomer, extraHttpRequestParams?: any): Observable<StoreCustomerResponse>;

    /**
     * Create Address for Logged-In Customer
     * Create an address for the logged-in customer.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param postCustomersMeAddressesRequest 
     */
    postCustomersMeAddresses(xPublishableApiKey: string, fields?: string, postCustomersMeAddressesRequest?: PostCustomersMeAddressesRequest, extraHttpRequestParams?: any): Observable<StoreCustomerResponse>;

    /**
     * Update Customer\&#39;s Address
     * Update the logged-in customer\&#39;s address.
     * @param addressId The address\&#39;s ID.
     * @param xPublishableApiKey Publishable API Key created in the Medusa Admin.
     * @param fields Comma-separated fields that should be included in the returned data. if a field is prefixed with &#x60;+&#x60; it will be added to the default fields, using &#x60;-&#x60; will remove it from the default fields. without prefix it will replace the entire default fields.
     * @param postCustomersMeAddressesAddressIdRequest 
     */
    postCustomersMeAddressesAddressId(addressId: string, xPublishableApiKey: string, fields?: string, postCustomersMeAddressesAddressIdRequest?: PostCustomersMeAddressesAddressIdRequest, extraHttpRequestParams?: any): Observable<StoreCustomerResponse>;

}
